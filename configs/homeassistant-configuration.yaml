# Vitality GOES via REST
rest:
  - resource: http://YOUR_VITALITY_GOES_HOST:PORT/dataHandler.php?type=weatherJSON
    scan_interval: 900
    sensor:
      - unique_id: sensor.vitality_goes_conditions
        name: "Vitality GOES - Conditions"
        value_template: >
          {% if (is_state('sun.sun', 'below_horizon') and value_json.weatherDesc == 'CLEAR') or value_json.weatherDesc == 'FAIR' %}clear-night
          {% elif (is_state('sun.sun', 'above_horizon') and value_json.weatherDesc == 'CLEAR') or value_json.weatherDesc == 'SUNNY' or value_json.weatherDesc == 'MOSUNNY' %}sunny
          {% elif value_json.weatherDesc == 'PTSUNNY' or value_json.weatherDesc == 'PTCLDY' or value_json.weatherDesc == 'HAZE' %}partlycloudy
          {% elif value_json.weatherDesc == 'MOCLDY' or value_json.weatherDesc == 'CLOUDY' %}cloudy
          {% elif value_json.weatherDesc == 'FLURRIES' or value_json.weatherDesc == 'LGT SNOW' or value_json.weatherDesc == 'SNOW' or value_json.weatherDesc == 'HVY SNOW' %}snowy
          {% elif value_json.weatherDesc == 'LGT RAIN' or value_json.weatherDesc == 'RAIN' %}rainy
          {% elif value_json.weatherDesc == 'HVY RAIN' %}pouring
          {% elif value_json.weatherDesc == 'FRZ RAIN' or value_json.weatherDesc == 'MIX PCPN' %}snowy-rainy
          {% elif value_json.weatherDesc == 'FOG' %}fog
          {% elif value_json.weatherDesc == 'TSTM' %}lightning
          {% else %}exceptional
          {% endif %}
      - unique_id: sensor.vitality_goes_forecast1
        name: "Vitality GOES - Forecast Day 1"
        value_template: >
          {% if 'maxTemp' in value_json.sevenDayForcast[0] %}
          {% set offset = 0 %}
          {% else %}
          {% set offset = 1 %}
          {% endif %}
          {{ value_json.sevenDayForcast[offset] | to_json }}
      - unique_id: sensor.vitality_goes_forecast2
        name: "Vitality GOES - Forecast Day 2"
        value_template: >
          {% if 'maxTemp' in value_json.sevenDayForcast[0] %}
          {% set offset = 1 %}
          {% else %}
          {% set offset = 2 %}
          {% endif %}
          {{ value_json.sevenDayForcast[offset] | to_json }}
      - unique_id: sensor.vitality_goes_forecast3
        name: "Vitality GOES - Forecast Day 3"
        value_template: >
          {% if 'maxTemp' in value_json.sevenDayForcast[0] %}
          {% set offset = 2 %}
          {% else %}
          {% set offset = 3 %}
          {% endif %}
          {{ value_json.sevenDayForcast[offset] | to_json }}
      - unique_id: sensor.vitality_goes_forecast4
        name: "Vitality GOES - Forecast Day 4"
        value_template: >
          {% if 'maxTemp' in value_json.sevenDayForcast[0] %}
          {% set offset = 3 %}
          {% else %}
          {% set offset = 4 %}
          {% endif %}
          {{ value_json.sevenDayForcast[offset] | to_json }}
      - unique_id: sensor.vitality_goes_forecast5
        name: "Vitality GOES - Forecast Day 5"
        value_template: >
          {% if 'maxTemp' in value_json.sevenDayForcast[0] %}
          {% set offset = 4 %}
          {% else %}
          {% set offset = 5 %}
          {% endif %}
          {{ value_json.sevenDayForcast[offset] | to_json }}
      - unique_id: sensor.vitality_goes_forecast6
        name: "Vitality GOES - Forecast Day 6"
        value_template: >
          {% if 'maxTemp' in value_json.sevenDayForcast[0] %}
          {% set offset = 5 %}
          {% else %}
          {% set offset = 6 %}
          {% endif %}
          {{ value_json.sevenDayForcast[offset] | to_json }}
      - unique_id: sensor.vitality_goes_forecast7
        name: "Vitality GOES - Forecast Day 7"
        value_template: >
          {% if 'maxTemp' in value_json.sevenDayForcast[0] %}
          {% set offset = 6 %}
          {% else %}
          {% set offset = 7 %}
          {% endif %}
          {{ value_json.sevenDayForcast[offset] | to_json }}
      - unique_id: sensor.vitality_goes_pressure
        name: "Vitality GOES - Pressure"
        value_template: "{{ (value_json.pressure)[:-1] }}"
        unit_of_measurement: "inHg"
        device_class: pressure
      - unique_id: sensor.vitality_goes_temp
        name: "Vitality GOES - Temp"
        value_template: "{{ value_json.temp }}"
        unit_of_measurement: "°F"
        device_class: temperature
      - unique_id: sensor.vitality_goes_humidity
        name: "Vitality GOES - Humidity"
        value_template: "{{ value_json.humidity }}"
        unit_of_measurement: "%"
        device_class: humidity
      - unique_id: sensor.vitality_goes_wind
        name: "Vitality GOES - Wind"
        value_template: "{{ value_json.wind }}"
        unit_of_measurement: "mph"
        device_class: wind_speed
      - unique_id: sensor.vitality_goes_wind_direction
        name: "Vitality GOES - Wind Direction"
        value_template: "{{ value_json.windDirection }}"

# Vitality GOES Weather Source
weather:
  - platform: template
    unique_id: weather.vitality_goes
    name: "Vitality GOES"
    condition_template: "{{ states('sensor.vitality_goes_conditions') }}"
    temperature_template: "{{ states('sensor.vitality_goes_temp') | float }}"
    temperature_unit: "°F"
    humidity_template: "{{ states('sensor.vitality_goes_humidity') | float }}"
    pressure_template: "{{ states('sensor.vitality_goes_pressure') | float }}"
    pressure_unit: "inHg"
    wind_speed_template: "{{ states('sensor.vitality_goes_wind') | float }}"
    wind_speed_unit: "mph"
    wind_bearing_template: "{{ states('sensor.vitality_goes_wind_direction') }}"
    attribution_template: "Powered by Vitality GOES - https://github.com/JVital2013/vitality-goes"
    forecast_template: >
      {%- macro forecastConditions(day) %}
        {%- set forecastCondition = "exceptional" %}
        {%- if day.amClouds == "CL" or day.amClouds == "FW" %}
          {%- set forecastCondition = "sunny" %}
        {%- elif day.amClouds == "SC" or day.amClouds == "B1" %}
          {%- if day.amPrecip | int < 50 %}
            {%- set forecastCondition = "partlycloudy" %}
          {%- else %}
            {%- set forecastCondition = "rainy" %}
          {%- endif %}
        {%- elif day.amClouds == "B2" or day.amClouds == "OV" %}
          {%- if day.amPrecip | int < 50 %}
            {%- set forecastCondition = "cloudy" %}
          {%- else %}
            {%- set forecastCondition = "rainy" %}
          {%- endif %}
        {%- endif %}
        {{- forecastCondition }}
      {%- endmacro %}
      
      {% set forecast = [] %}
      
      {% set day = (states("sensor.vitality_goes_forecast_day_1") | from_json) %}
      {% set forecast = forecast + 
      [
        {
          "condition": forecastConditions(day),
          "datetime": strptime(day.date + " " + (now() + timedelta(days=1)).year | string, "%A, %b %d %Y").isoformat(),
          "native_temperature": day.maxTemp,
          "native_templow": day.minTemp,
          "precipitation_probability": day.amPrecip
        }
      ] %}
      
      {% set day = (states("sensor.vitality_goes_forecast_day_2") | from_json) %}
      {% set forecast = forecast + 
      [
        {
          "condition": forecastConditions(day),
          "datetime": strptime(day.date + " " + (now() + timedelta(days=2)).year | string, "%A, %b %d %Y").isoformat(),
          "native_temperature": day.maxTemp,
          "native_templow": day.minTemp,
          "precipitation_probability": day.amPrecip
        }
      ] %}
      
      {% set day = (states("sensor.vitality_goes_forecast_day_3") | from_json) %}
      {% set forecast = forecast + 
      [
        {
          "condition": forecastConditions(day),
          "datetime": strptime(day.date + " " + (now() + timedelta(days=3)).year | string, "%A, %b %d %Y").isoformat(),
          "native_temperature": day.maxTemp,
          "native_templow": day.minTemp,
          "precipitation_probability": day.amPrecip
        }
      ] %}
      
      {% set day = (states("sensor.vitality_goes_forecast_day_4") | from_json) %}
      {% set forecast = forecast + 
      [
        {
          "condition": forecastConditions(day),
          "datetime": strptime(day.date + " " + (now() + timedelta(days=4)).year | string, "%A, %b %d %Y").isoformat(),
          "native_temperature": day.maxTemp,
          "native_templow": day.minTemp,
          "precipitation_probability": day.amPrecip
        }
      ] %}
      
      {% set day = (states("sensor.vitality_goes_forecast_day_5") | from_json) %}
      {% set forecast = forecast + 
      [
        {
          "condition": forecastConditions(day),
          "datetime": strptime(day.date + " " + (now() + timedelta(days=5)).year | string, "%A, %b %d %Y").isoformat(),
          "native_temperature": day.maxTemp,
          "native_templow": day.minTemp,
          "precipitation_probability": day.amPrecip
        }
      ] %}
      
      {% set day = (states("sensor.vitality_goes_forecast_day_6") | from_json) %}
      {% set forecast = forecast + 
      [
        {
          "condition": forecastConditions(day),
          "datetime": strptime(day.date + " " + (now() + timedelta(days=6)).year | string, "%A, %b %d %Y").isoformat(),
          "native_temperature": day.maxTemp,
          "native_templow": day.minTemp,
          "precipitation_probability": day.amPrecip
        }
      ] %}
      
      {% set day = (states("sensor.vitality_goes_forecast_day_7") | from_json) %}
      {% set forecast = forecast + 
      [
        {
          "condition": forecastConditions(day),
          "datetime": strptime(day.date + " " + (now() + timedelta(days=7)).year | string, "%A, %b %d %Y").isoformat(),
          "native_temperature": day.maxTemp,
          "native_templow": day.minTemp if "minTemp" in day else "",
          "precipitation_probability": day.amPrecip
        }
      ] %}
      
      {{ forecast }}
