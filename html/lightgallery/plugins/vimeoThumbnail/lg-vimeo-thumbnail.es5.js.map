{"version":3,"file":"lg-vimeo-thumbnail.es5.js","sources":["../../../src/lg-events.ts","../../../src/plugins/vimeoThumbnail/lg-vimeo-thumbnail-settings.ts","../../../src/plugins/vimeoThumbnail/lg-vimeo-thumbnail.ts"],"sourcesContent":["import { LightGallery } from './lightgallery';\nimport { VideoSource } from './plugins/video/types';\n\n/**\n * List of lightGallery events\n * All events should be documented here\n * Below interfaces are used to build the website documentations\n * */\nexport const lGEvents: {\n    [key: string]: string;\n} = {\n    afterAppendSlide: 'lgAfterAppendSlide',\n    init: 'lgInit',\n    hasVideo: 'lgHasVideo',\n    containerResize: 'lgContainerResize',\n    updateSlides: 'lgUpdateSlides',\n    afterAppendSubHtml: 'lgAfterAppendSubHtml',\n    beforeOpen: 'lgBeforeOpen',\n    afterOpen: 'lgAfterOpen',\n    slideItemLoad: 'lgSlideItemLoad',\n    beforeSlide: 'lgBeforeSlide',\n    afterSlide: 'lgAfterSlide',\n    posterClick: 'lgPosterClick',\n    dragStart: 'lgDragStart',\n    dragMove: 'lgDragMove',\n    dragEnd: 'lgDragEnd',\n    beforeNextSlide: 'lgBeforeNextSlide',\n    beforePrevSlide: 'lgBeforePrevSlide',\n    beforeClose: 'lgBeforeClose',\n    afterClose: 'lgAfterClose',\n    rotateLeft: 'lgRotateLeft',\n    rotateRight: 'lgRotateRight',\n    flipHorizontal: 'lgFlipHorizontal',\n    flipVertical: 'lgFlipVertical',\n    autoplay: 'lgAutoplay',\n    autoplayStart: 'lgAutoplayStart',\n    autoplayStop: 'lgAutoplayStop',\n};\n\n// Follow the below format for the event documentation\n// @method is the method name when event is used with Angular/React components\n\n/**\n * Fired only once when lightGallery is initialized\n * @name lgInit\n * @method onInit\n * @example\n *   const lg = document.getElementById('custom-events-demo');\n *   // Perform any action on lightGallery initialization.\n *   // Init event returns the plugin instance that can be used to call any lightGalley public method\n *   let pluginInstance = null;\n *   lg.addEventListener('lgInit', (event) => {\n *      pluginInstance = event.detail.instance;\n *   });\n *   lightGallery(lg);\n * @see <a href=\"/docs/methods\">Methods<a>\n */\nexport interface InitDetail {\n    /**\n     * lightGallery plugin instance\n     */\n    instance: LightGallery;\n}\n\n/**\n * Fired when the slide content has been inserted into it's slide container.\n * @name lgAfterAppendSlide\n * @method onAfterAppendSlide\n */\nexport interface AfterAppendSlideEventDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired immediately before opening the gallery\n * @name lgBeforeOpen\n * @method onBeforeOpen\n */\nexport interface BeforeOpenDetail {}\n\n/**\n * Fired immediately after opening the gallery\n * @name lgAfterOpen\n * @method onAfterOpen\n */\nexport interface AfterOpenDetail {}\n\n/**\n * Fired once the media inside the slide has been completely loaded .\n * @name lgSlideItemLoad\n * @method onSlideItemLoad\n */\nexport interface SlideItemLoadDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * For the first slide, lightGallery adds some delay for displaying the loaded slide item.\n     * This delay is required for the transition effect when the slide item is displayed\n     * Respect the delay when you use this event\n     */\n    delay: number;\n\n    // Will be true for the first slide\n    isFirstSlide: boolean;\n}\n\n/**\n * Fired immediately before each slide transition.\n * @name lgBeforeSlide\n * @method onBeforeSlide\n * @example\n *   const lg = document.getElementById('custom-events-demo');\n *   // Perform any action before each slide transition\n *   lg.addEventListener('lgBeforeSlide', (event) => {\n *       const { index, prevIndex } = event.detail;\n *       alert(index, prevIndex);\n *   });\n *   lightGallery(lg);\n */\nexport interface BeforeSlideDetail {\n    /**\n     * Index of the previous slide\n     */\n    prevIndex: number;\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n    /**\n     * true if slide function called via thumbnail click\n     */\n    fromThumb: boolean;\n}\n\n/**\n * Fired immediately after each slide transition.\n * @name lgAfterSlide\n * @method onAfterSlide\n */\nexport interface AfterSlideDetail {\n    /**\n     * Index of the previous slide\n     */\n    prevIndex: number;\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n    /**\n     * true if slide function called via thumbnail click\n     */\n    fromThumb: boolean;\n}\n\n/**\n * Fired when the video poster is clicked.\n * @name lgPosterClick\n * @method onPosterClick\n */\nexport interface PosterClickDetail {}\n\n/**\n * Fired when the drag event to move to different slide starts.\n * @name lgDragStart\n * @method onDragStart\n */\nexport interface DragStartDetail {}\n\n/**\n * Fired periodically during the drag operation.\n * @name lgDragMove\n * @method onDragMove\n */\nexport interface DragMoveDetail {}\n\n/**\n * Fired when the user has finished the drag operation\n * @name lgDragEnd\n * @method onDragEnd\n */\nexport interface DragEndDetail {}\n\n/**\n * Fired immediately before the start of the close process.\n * @name lgBeforeClose\n * @method onBeforeClose\n */\nexport interface BeforeCloseDetail {}\n\n/**\n * Fired immediately once lightGallery is closed.\n * @name lgAfterClose\n * @method onAfterClose\n */\nexport interface AfterCloseDetail {\n    /**\n     * lightGallery plugin instance\n     */\n    instance: LightGallery;\n}\n\n/**\n * Fired immediately before each \"next\" slide transition\n * @name lgBeforeNextSlide\n * @method onBeforeNextSlide\n */\nexport interface BeforeNextSlideDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n}\n\n/**\n * Fired immediately before each \"prev\" slide transition\n * @name lgBeforePrevSlide\n * @method onBeforePrevSlide\n */\nexport interface BeforePrevSlideDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n}\n\n/**\n * Fired when the sub-html content (ex : title/ description) has been appended into the slide.\n * @name lgAfterAppendSubHtml\n * @method onAfterAppendSubHtml\n */\nexport interface AfterAppendSubHtmlDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when the lightGallery container has been resized.\n * @name lgContainerResize\n * @method onContainerResize\n */\nexport interface ContainerResizeDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when lightGallery detects video slide\n * @name lgHasVideo\n * @method onHasVideo\n */\nexport interface HasVideoDetail {\n    /**\n     * Index of the slide,\n     */\n    index: number;\n    /**\n     * Video source\n     */\n    src: string;\n    /**\n     * HTML5 video source if available\n     * <p>\n       HTML5 video source = source: {\n            src: string;\n            type: string;\n        }[];\n        attributes: HTMLVideoElement;\n     * </p>\n     */\n    html5Video: VideoSource;\n    /**\n     * True if video has poster\n     */\n    hasPoster: boolean;\n}\n\n/**\n * Fired when the image is rotated in anticlockwise direction\n * @name lgRotateLeft\n * @method onRotateLeft\n */\nexport interface RotateLeftDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when the image is rotated in clockwise direction\n * @name lgRotateRight\n * @method onRotateRight\n */\nexport interface RotateRightDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when the image is flipped horizontally\n * @name lgFlipHorizontal\n * @method onFlipHorizontal\n */\nexport interface FlipHorizontalDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when the image is flipped vertically\n * @name lgFlipVertical\n * @method onFlipVertical\n */\nexport interface FlipVerticalDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n","export interface VimeoThumbnailSettings {\n    /**\n     * Auto load thumbnails for Vimeo videos\n     */\n    showVimeoThumbnails: boolean;\n\n    /**\n     * Show thumbnails with play button\n     */\n    showThumbnailWithPlayButton: boolean;\n}\nexport const vimeoSettings: VimeoThumbnailSettings = {\n    showVimeoThumbnails: true,\n    showThumbnailWithPlayButton: false,\n};\n","import { lGEvents } from '../../lg-events';\nimport { LightGallery } from '../../lightgallery';\nimport {\n    vimeoSettings,\n    VimeoThumbnailSettings,\n} from './lg-vimeo-thumbnail-settings';\n\n/**\n * Creates the vimeo thumbnails plugin.\n * @param {object} element - lightGallery element\n */\nexport default class VimeoThumbnail {\n    core: LightGallery;\n    settings: VimeoThumbnailSettings;\n\n    constructor(instance: LightGallery) {\n        this.core = instance;\n\n        // extend module default settings with lightGallery core settings\n        this.settings = { ...vimeoSettings, ...this.core.settings };\n\n        return this;\n    }\n\n    public init(): void {\n        if (!this.settings.showVimeoThumbnails) {\n            return;\n        }\n\n        this.core.LGel.on(`${lGEvents.init}.vimeothumbnails`, (event) => {\n            const pluginInstance = event.detail.instance;\n            const thumbCont = pluginInstance.$container\n                .find('.lg-thumb-outer')\n                .get();\n            if (thumbCont) {\n                this.setVimeoThumbnails(pluginInstance);\n            }\n        });\n    }\n\n    async setVimeoThumbnails(dynamicGallery: LightGallery): Promise<void> {\n        for (let i = 0; i < dynamicGallery.galleryItems.length; i++) {\n            const item = dynamicGallery.galleryItems[i];\n            const slideVideoInfo = item.__slideVideoInfo || {};\n            if (slideVideoInfo.vimeo) {\n                const response = await fetch(\n                    'https://vimeo.com/api/oembed.json?url=' +\n                        encodeURIComponent(item.src as string),\n                );\n                const vimeoInfo = await response.json();\n                dynamicGallery.$container\n                    .find('.lg-thumb-item')\n                    .eq(i)\n                    .find('img')\n                    .attr(\n                        'src',\n                        this.settings.showThumbnailWithPlayButton\n                            ? vimeoInfo.thumbnail_url_with_play_button\n                            : vimeoInfo.thumbnail_url,\n                    );\n            }\n        }\n    }\n\n    public destroy(): void {\n        // Remove all event listeners added by vimeothumbnails plugin\n        this.core.LGel.off('.lg.vimeothumbnails');\n        this.core.LGel.off('.vimeothumbnails');\n    }\n}\n"],"names":[],"mappings":"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"}